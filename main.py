import asyncio
import datetime
import time
import logging
from datetime import datetime
from aiogram.utils import exceptions

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor


from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, \
    ReplyKeyboardMarkup, InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from pytz import timezone
import ccxt.async_support as ccxt
import json
import requests

from my_libraries import Tools
from help import config
from db import Database
import chat_gpt

db = Database('files/db_users.db')

"""
–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
"""

log = Tools.Log('log.log')
reviews = config()['telegram']['reviews']

icons = {
    "–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏": "ü•ó",
    "–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞": "üç≤",
    "–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞": "üçõ",
    "–ì–∞—Ä–Ω–∏—Ä—ã": "üçö",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–ù–∞–ø–∏—Ç–∫–∏": "‚òï",
    "–ó–∞–≤—Ç—Ä–∞–∫": "üßëüèª‚Äçüç≥",
    "–£–∂–∏–Ω": "üçΩÔ∏è",
    "–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è": "üç£",
    "–ü–æ–∫–µ": "ü•¢",
    "–•–ª–µ–±": "üçû",
    "–°–æ—É—Å": "üßâ",
    "–î–∞—Ä—ã –º–æ—Ä—è": "ü¶û",
    "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞": "ü•©",
    "–†–∞–¥–æ—Å—Ç—å": "ü§©",
    "–ü–µ—á–∞–ª—å": "üò¢",
    "–ì–Ω–µ–≤": "üò°",
    "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "üòå",
    "–í–æ–ª–Ω–µ–Ω–∏–µ": "üò¨",
    "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "üë©üèª‚Äçüíª",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üôãüèª‚Äç‚ôÄÔ∏è",
    "–û–±–ª–æ–º–æ–≤": "‚≠ê",
    "–ò–≤–ª–µ–≤": "‚≠ê",
}

try:
    bot = Bot(token=config()['telegram']['api'], parse_mode='HTML',
              protect_content=False)
except:
    print("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª config.json –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    time.sleep(10000000)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
main_loop = asyncio.get_event_loop()

last_time = {}
time_wait = 1000  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å

"""
–†–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¢–ì-–±–æ—Ç–∞.
"""

import handlers.menu_start as m_start
import handlers.menu_client as m_settings
import handlers.menu_food as m_food


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user.id
    if db.check_users_user_exists(message.from_user.id):
        print(f"‚îÇ [{Tools.timenow()}] {message.from_user.first_name} ‚Üí –ú–µ–Ω—é")
        if not db.get_users_ban(message.from_user.id):
            await m_start.start(message)
        else:
            await bot.send_message(
                chat_id=user,
                text="\nüö´ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>"
                        "\n"
                        "\n<i>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,"
                        "\n–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é, –∏ –≤ —Ü–µ–ª—è—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.</i>"
            )
    else:
        print(f"‚îÇ [{Tools.timenow()}] NEW {message.from_user.first_name} ‚Üí –ú–µ–Ω—é")
        await m_start.start(message)


@dp.inline_handler()
async def food_restaurant_search(inline_query: InlineQuery):
    user = inline_query.from_user.id
    mode = db.get_users_mode(user)

    # –ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if mode['key'] == 'food_inline_handler':
        if len(str(inline_query.query)) > 0:
            print(f'‚îÇ [{Tools.timenow()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω... {str(inline_query.query)}')
            posts = db.restaurants_find_all(str(inline_query.query).lower().capitalize())
        else:
            posts = db.restaurants_get_all()

        results = []
        if posts == []:
            result = InlineQueryResultArticle(
                id='0',
                title=f"–†–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç üòî",
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω ‚¨Ö",
                input_message_content=InputTextMessageContent(f'–†–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç üòî'),
            )
            results.append(result)
            db.set_users_mode(user, db.get_users_mode(user)['id'], 'food_inline_handler_empty')
        else:
            for post in posts:
                result = InlineQueryResultArticle(
                    id=post[0],
                    title=f"¬´{post[1]}¬ª",
                    description=post[2],
                    input_message_content=InputTextMessageContent(f'{post[1]}:{post[2]}'),
                )
                results.append(result)
            db.set_users_mode(user, db.get_users_mode(user)['id'], 'food_inline_handler')

        await inline_query.answer(results, cache_time=1)

    # –ü–æ–∏—Å–∫ –±–ª—é–¥–∞
    elif mode['key'] == 'wrire_review':
        rest_name = db.get_client_temp_rest(user).split(':')[0]
        if len(str(inline_query.query)) > 0:
            print(f'‚îÇ [{Tools.timenow()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –±–ª—é–¥–æ... {str(inline_query.query)}')
            posts = db.restaurants_find_dish(rest_name, str(inline_query.query).lower().capitalize())
        else:
            posts = db.restaurants_get_all_dish(rest_name)

        results = []
        if len(posts) == 0:
            result = InlineQueryResultArticle(
                id='0',
                title=f"–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç ü§î",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                input_message_content=InputTextMessageContent(f'–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç ü§î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
            )
            results.append(result)
            await inline_query.answer(results, cache_time=1)
        else:
            for post in posts:
                result = InlineQueryResultArticle(
                    id=post[0],
                    title=f"¬´{post[1]}¬ª: ¬´{post[3]}¬ª",
                    description=post[2],
                    input_message_content=InputTextMessageContent(f'{post[1]}:{post[2]}:{post[3]}'),
                )
                results.append(result)
            await inline_query.answer(results[:10], cache_time=1)


@dp.message_handler(content_types=["any"])
async def bot_message(message):
    user = message.from_user.id
    mode = db.get_users_mode(user)
    if message.text != '/start':

        # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if mode['key'] == 'client_register_blacklist':
            await client_register_blacklist(user, message)

        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        if mode['key'] == 'food_inline_handler_empty':
            await bot.send_message(
                chat_id=user,
                text="–ü—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞—à —á–∞—Ç @jul_lut, –º—ã –±—É–¥–µ–º –≤–∞–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã ‚ú®",
                reply_markup=buttons_00()
            )

        # –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
        if mode['key'] == 'food_inline_handler':
            await m_food.food_rec_get(user, message)

        # –í—ã–±–æ—Ä –±–ª—é–¥–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
        if mode['key'] == 'wrire_review':
            dish = message.text.split(':')
            dish_id = db.restaurants_get_dish(dish[0], dish[1], dish[2])[0]
            db.set_client_temp_dish_id(user, dish_id)
            await choose_dish(dish_id, message)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        if mode['key'] == 'review':
            await bot.send_message(
                chat_id=reviews,
                text=f"‚≠êÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç id<code>{user}</code>:\n"
                     f"\n"
                     f"<i>{message.text}</i>"
            )
            db.restaurants_set_review(db.get_client_temp_dish_id(user), message.text)
            await bot.edit_message_text(
                chat_id=user,
                message_id=mode['id'],
                text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚≠êÔ∏è",
                reply_markup=buttons_02()
            )
            db.set_users_mode(user, mode['id'], '')

    try:
        await bot.delete_message(user, message.message_id)
    except:
        pass

async def client_register_blacklist(user, message: types.Message):
    message_obj = await message.answer(
        text=f"–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É... ‚è≥"
    )
    products = chat_gpt.send_message(message.text)
    db.set_client_blacklist(user, products)
    await bot.edit_message_text(
        chat_id=user,
        message_id=message_obj.message_id,
        text=f"–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã –ù–ï –µ–¥–∏—Ç–µ:\n"
             f"<code>{products}</code>\n"
             f"\n"
             f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=buttons_01()
    )


def buttons_00():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–•–æ—Ä–æ—à–æ! –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                callback_data="temp_del")

    menu.add(btn1)

    return menu

def buttons_01():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ üëçüèª",
                                callback_data="client_register_ready")

    btn2 = InlineKeyboardButton(text="–ù–µ—Ç! –°–µ–π—á–∞—Å –Ω–∞–ø–∏—à—É –∑–∞–Ω–æ–≤–æ üëéüèª",
                                callback_data="client_register_notready")

    menu.add(btn1)
    menu.add(btn2)

    return menu

def buttons_02():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                callback_data="menu_start")

    menu.add(btn1)

    return menu


"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""

@dp.callback_query_handler(text_contains=f"temp_del")
async def temp_del(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    await bot.delete_message(user, call.message.message_id)


async def checker():
    while True:
        await asyncio.sleep(60 - time.time() % 60)
        # await asyncio.sleep(10)

        for client in db.all_client():
            try:
                client_id = client[0]
                client_alert = client[-1]
                if client_alert == 0:
                    continue

                if round(time.time()) > client_alert + 60*30 - 60:
                # if True:
                    mode = db.get_users_mode(client_id)
                    message_obj = await bot.send_message(
                        chat_id=client_id,
                        text=f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ food mood! ü§åüèª\n"
                             f"\n"
                             f"–û—Ü–µ–Ω–∏—Ç–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–∑—è–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏! "
                             f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–∞—à–∏—Ö –≤–∫—É—Å–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π "
                             f"–∏ –æ–∫–∞–∂–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ "
                             f"–≤ –±—É–¥—É—â–µ–º üòèüîÆ",
                        reply_markup=buttons_03()
                    )
                    db.set_client_can_alert(client_id, 0)
                    db.set_users_mode(client_id, message_obj.message_id, 'wrire_review')
            except BaseException as ex:
                print(f"‚îÇ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤: {ex}")

async def choose_dish(dish_id, message: types.Message):
    user = message.from_user.id
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    mode = db.get_users_mode(user)
    dish = db.restaurants_get_by_id(dish_id)

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=mode['id'],
        text=f"üç§ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b>\n"
             f"<i>¬´{dish[1]}¬ª, {dish[2]}</i>\n"
             f"\n"
             f"üí´ –ë–ª—é–¥–æ:\n"
             f"<i>¬´{dish[4]}¬ª</i>\n"
             f"\n"
             f"–û—Ü–µ–Ω–∏—Ç–µ –±–ª—é–¥–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 üëáüèª",
        reply_markup=buttons_04(dish_id)
    )
    db.set_users_mode(user, mode['id'], 'review')


def buttons_03():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="üîé –í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ", switch_inline_query_current_chat='')

    menu.add(btn1)

    return menu

def buttons_04(dish_id):
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="1 ‚≠ê",
                                callback_data=f"review_star_1_{dish_id}")

    btn2 = InlineKeyboardButton(text="2 ‚≠ê",
                                callback_data=f"review_star_2_{dish_id}")

    btn3 = InlineKeyboardButton(text="3 ‚≠ê",
                                callback_data=f"review_star_3_{dish_id}")

    btn4 = InlineKeyboardButton(text="4 ‚≠ê",
                                callback_data=f"review_star_4_{dish_id}")

    btn5 = InlineKeyboardButton(text="5 ‚≠ê",
                                callback_data=f"review_star_5_{dish_id}")

    menu.row(btn1, btn2, btn3, btn4, btn5)

    return menu


@dp.callback_query_handler(text_contains=f"review_end")
async def review_end(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    mode = db.get_users_mode(user)
    await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ‚≠êÔ∏è",
        reply_markup=buttons_02()
    )
    db.set_users_mode(user, mode['id'], '')



@dp.callback_query_handler(text_contains=f"review_star")
async def review_star(call: types.CallbackQuery):
    user = call.from_user.id
    data = call.data.split('_')
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    mode = db.get_users_mode(user)
    dish_id = int(data[-1])
    dish = db.restaurants_get_by_id(dish_id)
    db.restaurants_set_rating(dish_id, int(data[-2]))

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=mode['id'],
        text=f"üç§ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b>\n"
             f"<i>¬´{dish[1]}¬ª, {dish[2]}</i>\n"
             f"\n"
             f"üí´ –ë–ª—é–¥–æ:\n"
             f"<i>¬´{dish[4]}¬ª</i>\n"
             f"\n"
             f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üôèüèª\n"
             f"\n"
             f"–°–ø–∞—Å–∏–±–æ!",
        reply_markup=buttons_05()
    )
    db.set_users_mode(user, mode['id'], 'review')


def buttons_05():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                callback_data=f"review_end")

    menu.row(btn1)

    return menu
"""
–ó–∞–ø—É—Å–∫.
"""


async def main():
    print(Tools.Color().send_contact())
    print("‚ï≠‚îÄ")
    asyncio.create_task(checker())


if __name__ == '__main__':
    try:
        from handlers import dp

        loop = asyncio.get_event_loop()
        loop.create_task(main())
        executor.start_polling(dp)
    except BaseException as ex:
        print("‚ï∞‚îÄ")
        print(Tools.Color().red("‚ï≠‚îÄ"))
        print(Tools.Color().red(f"‚îÇ –û—à–∏–±–∫–∞: {ex}."))
        print(Tools.Color().red(f"‚îÇ –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."))
        print(Tools.Color().red(f"‚îÇ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Oleg_TheSure"))
        print(Tools.Color().red("‚ï∞‚îÄ"))
        log.log_critical('DUMP!!!', True)
        time.sleep(1000000)
